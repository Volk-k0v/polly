import telebot
import openai
import nltk
nltk.download('punkt_tab')
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.corpus import stopwords
from io import BytesIO
from pdf2image import convert_from_path
from PIL import Image
import PyPDF2

# Replace with your OpenAI API key
openai.api_key = "ADD YOUR OPENAI API KEY"

bot = telebot.TeleBot("ADD YOUR TELEGRAM API KEY")

# Download and install NLTK data if not already installed
nltk.download("punkt")
nltk.download("stopwords")

def process_pdf(pdf_file):
  """Processes a PDF file to extract text and generate questions and answers."""
  text = extract_text_from_pdf(pdf_file)
  questions, answers = generate_questions_and_answers(text)
  return questions, answers

def extract_text_from_pdf(pdf_file):
  """Extracts text from a PDF file."""
  text = ""
  with open(pdf_file, "rb") as f:
      reader = PyPDF2.PdfReader(f)
      for page in reader.pages:
          text += page.extract_text()
  return text

def generate_questions_and_answers(text):
  """Generates questions and answers based on the extracted text."""
  questions = []
  answers = []

  # Tokenize the text into sentences
  sentences = sent_tokenize(text)

  # Iterate through sentences and generate questions and answers
  for sentence in sentences:
      # Preprocess the sentence (e.g., remove stop words)
      words = word_tokenize(sentence)
      words = [word for word in words if word not in stopwords.words("english")]

      # Generate a question and answer using OpenAI's API
      prompt = f"Generate a question based on the sentence: {sentence}"
      response = openai.Completion.create(
          engine="text-davinci-003",
          prompt=prompt,
          max_tokens=100,
          n=1
      )
      question = response.choices[0].text.strip()

      prompt = f"Generate an answer to the question: {question}"
      response = openai.Completion.create(
          engine="text-davinci-003",
          prompt=prompt,
          max_tokens=100,
          n=1
      )
      answer = response.choices[0].text.strip()

      # Add the question and answer to the lists
      questions.append(question)
      answers.append(answer)

  return questions, answers

@bot.message_handler(commands=["start"])
def start(message):
  bot.send_message(message.chat.id, "Send me a PDF file to generate questions and answers.")

@bot.message_handler(commands=["contact"])  # Added the handler for /contact command
def contact_handler(message):
  bot.send_message(message.chat.id, "You can contact me through [ghz44nlm@gmail.com] or by sending a direct message on Telegram here [https://t.me/user_naaamee].")

@bot.message_handler(content_types=["document"])
def handle_document(message):
  file_info = bot.get_file(message.document.file_id)
  downloaded_file = bot.download_file(file_info.file_path)

  # Save the downloaded file temporarily
  with open("temp.pdf", "wb") as f:
      f.write(downloaded_file)

  # Process the PDF file
  questions, answers = process_pdf("temp.pdf")

  for question, answer_options in zip(questions, answers):
      # Send the question
      bot.send_message(message.chat.id, question)

      # Create a poll with answer options (maximum 10 options)
      poll_options = answer_options[:10]  # Truncate to Telegram's limit
      poll = bot.send_poll(
          message.chat.id,
          question,
          poll_options,
          is_anonymous=False,  # Optional: Allow users to answer anonymously
      )

      # Store poll ID for later reference
      poll_id = poll.id

@bot.message_handler(commands=['poll_answer'])
def handle_poll_answer(call):
  poll_id = call.poll_id
  user_answer = call.option_ids[0]  # Assuming user selects only one option

  # Retrieve the corresponding question and answer options
  # (You might need to store this information in a database or use a different approach)
  question, answer_options = get_question_and_answers_by_poll_id(poll_id)

  # Evaluate the user's answer
  is_correct = evaluate_answer(user_answer, answer_options)

  # Send feedback message
  if is_correct:
      feedback_message = "Correct! Your answer is correct."
  else:
      feedback_message = "Incorrect. The correct answer is: " + correct_answer
  bot.send_message(call.message.chat.id, feedback_message)

# Helper function to retrieve question and answer options based on poll ID
def get_question_and_answers_by_poll_id(poll_id):
  # Implement your logic to retrieve the corresponding question and answer options
  # (e.g., from a database or in-memory storage)
  pass

# Helper function to evaluate the user's answer
def evaluate_answer(user_answer, answer_options):
  # Implement your logic to determine if the user's answer is correct
  # (e.g., compare user_answer with the correct answer index)
  pass

if __name__ == "__main__":
  bot.polling()
